package apy

import (
	"math/big"
	"time"

	"github.com/ethereum/go-ethereum/common"
	"github.com/yearn/ydaemon/common/bigNumber"
	"github.com/yearn/ydaemon/common/contracts"
	"github.com/yearn/ydaemon/common/ethereum"
	"github.com/yearn/ydaemon/common/helpers"
	"github.com/yearn/ydaemon/common/logs"
	"github.com/yearn/ydaemon/internal/models"
	"github.com/yearn/ydaemon/internal/multicalls"
	"github.com/yearn/ydaemon/internal/prices"
)

/**************************************************************************************************
** Determine the CvxKeepCrv value for the vault
**************************************************************************************************/
func determineCvxKeepCRV(strategy *models.TStrategy) *bigNumber.Float {
	if strategy.KeepCRV == nil {
		return ZERO
	}
	client := ethereum.GetRPC(strategy.ChainID)
	convexStrategyContract, _ := contracts.NewConvexBaseStrategy(strategy.Address, client)
	useLocalCRV, err := convexStrategyContract.UselLocalCRV(nil)
	if err != nil {
		return helpers.ToNormalizedAmount(strategy.KeepCRV, 4)
	}
	if useLocalCRV {
		cvxKeepCRV, err := convexStrategyContract.LocalCRV(nil)
		if err != nil {
			localKeepCRV, err := convexStrategyContract.LocalKeepCRV(nil)
			if err != nil {
				return ZERO
			}
			return helpers.ToNormalizedAmount(bigNumber.NewInt(0).Set(localKeepCRV), 4)
		}
		return helpers.ToNormalizedAmount(bigNumber.NewInt(0).Set(cvxKeepCRV), 4)
	}
	curveGlobal, err := convexStrategyContract.CurveGlobal(nil)
	if err != nil {
		return ZERO
	}
	curveGlobalContract, err := contracts.NewStrategyBase(curveGlobal, client)
	if err != nil {
		return ZERO
	}
	keepCRV, err := curveGlobalContract.KeepCRV(nil)
	if err != nil {
		return ZERO
	}
	return helpers.ToNormalizedAmount(bigNumber.NewInt(0).Set(keepCRV), 4)
}

/**************************************************************************************************
** The cumulative apr of all extra tokens that are emitted by depositing to Convex, assuming that
** they will be sold for profit.
** We need to pull data from convex's virtual rewards contracts to get bonus rewards
**************************************************************************************************/
func getConvexRewardAPR(
	chainID uint64,
	strategy *models.TStrategy,
	baseAssetPrice *bigNumber.Float,
	poolPrice *bigNumber.Float,
) *bigNumber.Float {
	client := ethereum.GetRPC(chainID)
	convexStrategyContract, _ := contracts.NewConvexBaseStrategy(strategy.Address, client)
	cvxBoosterContract, _ := contracts.NewCVXBooster(CVX_BOOSTER_ADDRESS, client)
	rewardPID, err := convexStrategyContract.Pid(nil)
	if err != nil {
		rewardPID, err = convexStrategyContract.ID(nil)
		if err != nil {
			logs.Error(`Unable to get reward PID for convex strategy`, strategy.Address.Hex(), err)
			return ZERO
		}
	}
	rewardContract, err := cvxBoosterContract.PoolInfo(nil, rewardPID)
	if err != nil {
		logs.Error(err)
		return ZERO
	}
	crvRewardContract, _ := contracts.NewCrvRewards(rewardContract.CrvRewards, client)
	rewardsLength, _ := crvRewardContract.ExtraRewardsLength(nil)

	now := time.Now().Unix()
	totalRewardsAPR := bigNumber.NewFloat(0)
	for i := 0; i < int(rewardsLength.Int64()); i++ {
		virtualRewardsPool, err := crvRewardContract.ExtraRewards(nil, big.NewInt(int64(i)))
		if err != nil {
			logs.Error(err)
			continue
		}
		virtualRewardsPoolContract, _ := contracts.NewCrvRewards(virtualRewardsPool, client)
		periodFinish, err := virtualRewardsPoolContract.PeriodFinish(nil)
		if err != nil {
			logs.Error(err)
			continue
		}
		if periodFinish.Int64() < now {
			continue
		}
		rewardToken, _ := virtualRewardsPoolContract.RewardToken(nil)
		rewardTokenPrice, ok := prices.FindPrice(chainID, rewardToken)
		if !ok {
			continue
		}
		rewardRateInt, _ := virtualRewardsPoolContract.RewardRate(nil)
		totalSupplyInt, _ := virtualRewardsPoolContract.TotalSupply(nil)

		tokenPrice := helpers.ToNormalizedAmount(rewardTokenPrice, 6)
		rewardRate := helpers.ToNormalizedAmount(bigNumber.NewInt(0).Set(rewardRateInt), 18)
		totalSupply := helpers.ToNormalizedAmount(bigNumber.NewInt(0).Set(totalSupplyInt), 18)
		secondPerYear := bigNumber.NewFloat(0).SetFloat64(31556952)

		rewardAPRTop := bigNumber.NewFloat(0).Mul(rewardRate, secondPerYear)
		rewardAPRTop = bigNumber.NewFloat(0).Mul(rewardAPRTop, tokenPrice)
		rewardAPRBottom := bigNumber.NewFloat(0).Div(poolPrice, ONE) //wei?
		rewardAPRBottom = bigNumber.NewFloat(0).Mul(rewardAPRBottom, baseAssetPrice)
		rewardAPRBottom = bigNumber.NewFloat(0).Mul(rewardAPRBottom, totalSupply)
		rewardAPR := bigNumber.NewFloat(0).Div(rewardAPRTop, rewardAPRBottom)
		totalRewardsAPR = bigNumber.NewFloat(0).Add(totalRewardsAPR, rewardAPR)
	}
	return totalRewardsAPR
}

/**************************************************************************************************
** The amount of CVX emissions at the current block for a given pool, converted to CRV (from a
** pricing standpoint) to ease calculation of total APY.
** Yeah, because why not.
**************************************************************************************************/
func getCVXEmissionsConvertedToCRV(chainID uint64) *bigNumber.Float {
	crvPrice := getTokenPrice(chainID, CRV_TOKEN_ADDRESS)
	cvxPrice := getTokenPrice(chainID, CVX_TOKEN_ADDRESS)
	totalCliff := bigNumber.NewFloat(0).SetString(`1000`) //1e3
	cvxContract, _ := contracts.NewERC20(CVX_TOKEN_ADDRESS, ethereum.GetRPC(chainID))
	supplyInt, _ := cvxContract.TotalSupply(nil)
	maxSupplyInt := bigNumber.NewInt(0).SetString(`100000000000000000000000000`)      //1e2 * 1e6 * 1e18
	reductionPerCliffInt := bigNumber.NewInt(0).SetString(`100000000000000000000000`) //1e23

	supply := helpers.ToNormalizedAmount(bigNumber.NewInt(0).Set(supplyInt), 18)
	maxSupply := helpers.ToNormalizedAmount(maxSupplyInt, 18)
	reductionPerCliff := helpers.ToNormalizedAmount(reductionPerCliffInt, 18)
	cliff := bigNumber.NewFloat(0).Div(supply, reductionPerCliff)
	if supply.Gt(maxSupply) {
		return ZERO
	}
	reduction := bigNumber.NewFloat(0).Sub(totalCliff, cliff)
	cvxMinted := bigNumber.NewFloat(0).Div(reduction, totalCliff)
	convertedCVX := bigNumber.NewFloat(0).Div(cvxPrice, crvPrice)
	value := bigNumber.NewFloat(0).Mul(cvxMinted, convertedCVX)
	return value
}

func getCVXPoolAPR(
	chainID uint64,
	strategyAddress common.Address,
	virtualPoolPrice *bigNumber.Float,
) *bigNumber.Float {
	crvAPR := bigNumber.NewFloat(0)
	cvxAPR := bigNumber.NewFloat(0)

	/**********************************************************************************************
	** First thing to do to be able to calculate the APR is to retrieve the `crvRewards` contract
	** for this given convex strategy. It's a multiple step with way too many contracts involved,
	** but in the end we should be able to query the `rewardRate` for it.
	***********************************************************************************************/
	client := ethereum.GetRPC(chainID)
	convexStrategyContract, err := contracts.NewConvexBaseStrategy(strategyAddress, client)
	if err != nil {
		return ZERO
	}

	/**********************************************************************************************
	** We need to know the PID of the pool. Based on the contract, it can be PID or ID, so we need
	** to try both, and one call can revert.
	***********************************************************************************************/
	rewardPID, err := convexStrategyContract.Pid(nil)
	if err != nil {
		rewardPID, err = convexStrategyContract.ID(nil)
		if err != nil {
			logs.Error(`Unable to get reward PID for convex strategy`, strategyAddress.Hex(), err)
			return ZERO
		}
	}

	/**********************************************************************************************
	** Once we got the PID, we can query the convexBooster contract to get the `poolInfo` for this
	** and retrieve the `crvRewards` contract
	***********************************************************************************************/
	cvxBoosterContract, err := contracts.NewCVXBooster(CVX_BOOSTER_ADDRESS, client)
	if err != nil {
		return ZERO
	}
	poolInfo, err := cvxBoosterContract.PoolInfo(nil, rewardPID)
	if err != nil {
		return ZERO
	}

	/**********************************************************************************************
	** Once we got the poolInfo, we can init a new contract connector, which would be a
	** `BaseRewardPool`, and we should be able to query the rewardRate for it.
	***********************************************************************************************/
	rewardContract, err := contracts.NewCrvRewards(poolInfo.CrvRewards, client)
	if err != nil {
		return ZERO
	}
	rateResult, err1 := rewardContract.RewardRate(nil)
	supplyResult, err2 := rewardContract.TotalSupply(nil)
	if err1 != nil || err2 != nil {
		return ZERO
	}

	/**********************************************************************************************
	** Then we should be able to calculate the cvxAPR just like it's done on the CVX subgraph, cf:
	** https://github.com/convex-community/convex-subgraph/blob/13dbb4e3f3f69c6762fecb1ebc46f477162e2093/subgraphs/convex/src/services/pools.ts#L269-L289
	***********************************************************************************************/
	rate := helpers.ToNormalizedAmount(bigNumber.NewInt(0).Set(rateResult), 18)
	supply := helpers.ToNormalizedAmount(bigNumber.NewInt(0).Set(supplyResult), 18)
	crvPerUnderlying := bigNumber.NewFloat(0)
	virtualSupply := bigNumber.NewFloat(0).Mul(supply, virtualPoolPrice)

	if virtualSupply.Gt(ZERO) {
		crvPerUnderlying = bigNumber.NewFloat(0).Div(rate, virtualSupply)
	}
	crvPerYear := bigNumber.NewFloat(0).Mul(crvPerUnderlying, bigNumber.NewFloat(31536000))
	cvxPerYear := getCVXForCRV(chainID, crvPerYear)

	crvPrice := getTokenPrice(chainID, CRV_TOKEN_ADDRESS)
	cvxPrice := getTokenPrice(chainID, CVX_TOKEN_ADDRESS)
	cvxAPR = bigNumber.NewFloat(0).Mul(cvxPerYear, cvxPrice)
	crvAPR = bigNumber.NewFloat(0).Mul(crvPerYear, crvPrice)
	logs.Pretty(`cvxAPR`, cvxAPR)
	logs.Pretty(`crvAPR`, crvAPR)
	return cvxAPR
}

func getCVXForCRV(chainID uint64, crvEarned *bigNumber.Float) *bigNumber.Float {
	cliffSize := bigNumber.NewFloat(0).SetString(`100000000000000000000000`)    //1e23
	cliffCount := bigNumber.NewFloat(0).SetString(`1000`)                       //1e3
	maxSupply := bigNumber.NewFloat(0).SetString(`100000000000000000000000000`) //1e26

	cvxContract, _ := contracts.NewERC20(CVX_TOKEN_ADDRESS, ethereum.GetRPC(chainID))
	cvxTotalSupplyInt, _ := cvxContract.TotalSupply(nil)
	cvxTotalSupply := bigNumber.NewFloat(0).SetInt(bigNumber.NewInt(0).Set(cvxTotalSupplyInt))
	currentCliff := bigNumber.NewFloat(0).Div(cvxTotalSupply, cliffSize)
	if currentCliff.Gte(cliffCount) {
		return ZERO
	}
	remaining := bigNumber.NewFloat(0).Sub(cliffCount, currentCliff)
	cvxEarned := bigNumber.NewFloat(0).Mul(crvEarned, remaining)
	cvxEarned = bigNumber.NewFloat(0).Div(cvxEarned, cliffCount)

	amountTillMax := bigNumber.NewFloat(0).Sub(maxSupply, cvxTotalSupply)
	if cvxEarned.Gt(amountTillMax) {
		cvxEarned = amountTillMax
	}
	return cvxEarned
}

/**************************************************************************************************
** Do a lot of stuff. Bob knows what.
**************************************************************************************************/
type TConvexDetailedApyData struct {
	cvxAPR             *bigNumber.Float
	cvxAPRMinusKeepCRV *bigNumber.Float
	cvxKeepCRV         *bigNumber.Float
	cvxDebtRatio       *bigNumber.Float
	convexRewardAPR    *bigNumber.Float
	cvxBoost           *bigNumber.Float
	cvxFee             *bigNumber.Float
	cvxPrintedAsCRV    *bigNumber.Float
}

func retrieveConvexDetailedApyData(
	chainID uint64,
	strategy *models.TStrategy,
	baseAssetPrice *bigNumber.Float,
	poolPrice *bigNumber.Float,
	baseAPR *bigNumber.Float,
	gaugeAddress common.Address,
) TConvexDetailedApyData {
	cvxKeepCRV := determineCvxKeepCRV(strategy)

	/**********************************************************************************************
	** Calculate all the fees from convex.
	** We first fetch everything in a multicall, then we calculate the total fees.
	**********************************************************************************************/
	calls := []ethereum.Call{}
	calls = append(calls, multicalls.GetConvexLockIncentive(CVX_BOOSTER_ADDRESS.Hex(), CVX_BOOSTER_ADDRESS))
	calls = append(calls, multicalls.GetConvexStakerIncentive(CVX_BOOSTER_ADDRESS.Hex(), CVX_BOOSTER_ADDRESS))
	calls = append(calls, multicalls.GetConvexEarmarkIncentive(CVX_BOOSTER_ADDRESS.Hex(), CVX_BOOSTER_ADDRESS))
	calls = append(calls, multicalls.GetConvexPlatformFee(CVX_BOOSTER_ADDRESS.Hex(), CVX_BOOSTER_ADDRESS))
	response := multicalls.Perform(chainID, calls, nil)
	cvxLockIncentive := helpers.DecodeBigInt(response[CVX_BOOSTER_ADDRESS.Hex()+`lockIncentive`])
	cvxStakerIncentive := helpers.DecodeBigInt(response[CVX_BOOSTER_ADDRESS.Hex()+`stakerIncentive`])
	cvxEarmarkIncentive := helpers.DecodeBigInt(response[CVX_BOOSTER_ADDRESS.Hex()+`earmarkIncentive`])
	cvxPlatformFee := helpers.DecodeBigInt(response[CVX_BOOSTER_ADDRESS.Hex()+`platformFee`])

	/**********************************************************************************************
	** Compute the cvxFEE from the above multicall results.
	**********************************************************************************************/
	cvxFee := bigNumber.NewFloat(0)
	cvxFee = bigNumber.NewFloat(0).Add(cvxFee, bigNumber.NewFloat(0).SetInt(cvxLockIncentive))
	cvxFee = bigNumber.NewFloat(0).Add(cvxFee, bigNumber.NewFloat(0).SetInt(cvxStakerIncentive))
	cvxFee = bigNumber.NewFloat(0).Add(cvxFee, bigNumber.NewFloat(0).SetInt(cvxEarmarkIncentive))
	cvxFee = bigNumber.NewFloat(0).Add(cvxFee, bigNumber.NewFloat(0).SetInt(cvxPlatformFee))
	cvxFee = bigNumber.NewFloat(0).Div(cvxFee, bigNumber.NewFloat(10000))

	/**********************************************************************************************
	** Compute some other stuff.
	**********************************************************************************************/
	convexRewardAPR := getConvexRewardAPR(chainID, strategy, baseAssetPrice, poolPrice)
	cvxBoost := getCurveBoost(chainID, CONVEX_VOTER_ADDRESS, gaugeAddress)
	cvxPrintedAsCRV := getCVXEmissionsConvertedToCRV(chainID)
	cvxDebtRatio := helpers.ToNormalizedAmount(strategy.DebtRatio, 4)

	return TConvexDetailedApyData{
		cvxAPR:          getCVXPoolAPR(chainID, strategy.Address, baseAssetPrice),
		convexRewardAPR: getConvexRewardAPR(chainID, strategy, baseAssetPrice, poolPrice),
		cvxKeepCRV:      cvxKeepCRV,
		cvxDebtRatio:    cvxDebtRatio,
		cvxBoost:        cvxBoost,
		cvxFee:          cvxFee,
		cvxPrintedAsCRV: cvxPrintedAsCRV,
	}
}

/**************************************************************************************************
** Calculate the APY based on the convex schema
**************************************************************************************************/
func calculateConvexAPY(
	chainID uint64,
	strategy *models.TStrategy,
	baseAssetPrice *bigNumber.Float,
	poolPrice *bigNumber.Float,
	baseAPR *bigNumber.Float,
	poolAPY *bigNumber.Float,
	gaugeAddress common.Address,
) TAPIV1APY {
	apyData := retrieveConvexDetailedApyData(chainID, strategy, baseAssetPrice, poolPrice, baseAPR, gaugeAddress)
	grossAPR := bigNumber.NewFloat(0).Mul(apyData.cvxAPR, apyData.cvxDebtRatio)
	grossAPR = bigNumber.NewFloat(0).Add(ONE, grossAPR)
	grossAPR = bigNumber.NewFloat(0).Mul(grossAPR, bigNumber.NewFloat(0).Mul(ONE, poolAPY))
	grossAPR = bigNumber.NewFloat(0).Sub(grossAPR, ONE)

	perfFee := bigNumber.NewFloat(0).SetInt(strategy.PerformanceFee)
	cvxNetAPR := bigNumber.NewFloat(0).Add(apyData.cvxAPRMinusKeepCRV, apyData.convexRewardAPR)
	cvxNetAPR = bigNumber.NewFloat(0).Mul(cvxNetAPR, bigNumber.NewFloat(0).Sub(ONE, perfFee))
	//Info: if management fee, reduce cvxNetAPR by management fee

	cvxNetFarmedAPY := bigNumber.NewFloat(0).Div(cvxNetAPR, bigNumber.NewFloat(52))
	cvxNetFarmedAPY = bigNumber.NewFloat(0).Add(ONE, cvxNetFarmedAPY)
	cvxNetFarmedAPY = bigNumber.NewFloat(0).Pow(cvxNetFarmedAPY, 51)
	cvxNetFarmedAPY = bigNumber.NewFloat(0).Sub(cvxNetFarmedAPY, ONE)

	cvxNetAPYLeft := bigNumber.NewFloat(0).Add(ONE, cvxNetFarmedAPY)
	cvxNetAPYRight := bigNumber.NewFloat(0).Add(ONE, poolAPY)
	cvxNetAPY := bigNumber.NewFloat(0).Mul(cvxNetAPYLeft, cvxNetAPYRight)
	cvxNetAPY = bigNumber.NewFloat(0).Sub(cvxNetAPY, ONE)

	// if grossAPR.Not(ZERO) {
	logs.Pretty(map[string]any{
		"gross_apr":   grossAPR.String(),
		"net_apy":     cvxNetAPY.String(),
		"boost":       apyData.cvxBoost.String(),
		"pool_apy":    poolAPY.String(),
		"boosted_apr": `~`,
		"baseAPR":     baseAPR.String(),
		"cvx_apr":     apyData.cvxAPR.String(),
		"rewards_apr": apyData.convexRewardAPR.String(),
	})
	apyStruct := TAPIV1APY{
		Type:              "convex",
		GrossAPR:          grossAPR,
		NetAPY:            cvxNetAPY,
		StakingRewardsAPR: ZERO,
		Fees: TAPIV1Fees{
			KeepCRV:    ZERO,
			CvxKeepCRV: apyData.cvxKeepCRV,
		},
		Composite: TAPIV1Composite{
			Boost:      apyData.cvxBoost,
			PoolAPY:    poolAPY,
			BoostedAPR: apyData.cvxAPR,
			BaseAPR:    baseAPR,
			CvxAPR:     apyData.cvxAPR,
			RewardsAPR: apyData.convexRewardAPR,
		},
	}
	return apyStruct
}
