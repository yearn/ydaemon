package apy

import (
	"github.com/ethereum/go-ethereum/common"
	"github.com/yearn/ydaemon/common/bigNumber"
	"github.com/yearn/ydaemon/common/helpers"
	"github.com/yearn/ydaemon/common/store"
	"github.com/yearn/ydaemon/internal/models"
)

type TCalculateCurveAPYDataStruct struct {
	vault                 models.TVault
	gaugeAddress          common.Address
	allStrategiesForVault []*models.TStrategy
	baseAssetPrice        *bigNumber.Float
	poolPrice             *bigNumber.Float
	baseAPR               *bigNumber.Float
	rewardAPR             *bigNumber.Float
	poolAPY               *bigNumber.Float
}

func calculateCurveForwardAPR(args TCalculateCurveAPYDataStruct) TAPIV1APY {
	chainID := args.vault.ChainID

	/**********************************************************************************************
	** Then we need to grab a few things: the amount of CRV to keep if it's set, the performanceFee
	** and the managementFee for that vault
	**********************************************************************************************/
	yBoost := getCurveBoost(chainID, YEARN_VOTER_ADDRESS, args.gaugeAddress)
	convexBoost := getCurveBoost(chainID, CONVEX_VOTER_ADDRESS, args.gaugeAddress)
	crvKeepCrv := determineKeepCRV(args.allStrategiesForVault)
	vaultPerformanceFee := helpers.ToNormalizedAmount(bigNumber.NewInt(int64(args.vault.PerformanceFee)), 4)
	vaultManagementFee := helpers.ToNormalizedAmount(bigNumber.NewInt(int64(args.vault.ManagementFee)), 4)
	oneMinusPerfFee := bigNumber.NewFloat(0).Sub(bigNumber.NewFloat(1), vaultPerformanceFee)

	/**********************************************************************************************
	** Grab the base debt ratio and check if we are in a curve + convex vault. If we are, we need
	** to calculate the CRV APY differently, aka with convex in it, but as it's not only a convex
	** vault, we do not override the formula as above.
	**********************************************************************************************/
	debtRatioCurve := bigNumber.NewFloat(1)
	debtRatioConvex := bigNumber.NewFloat(0)
	crvAPRByConvex := bigNumber.NewFloat(0)
	cvxAPRByConvex := bigNumber.NewFloat(0)
	if isCuveConvexVault(args.allStrategiesForVault) {
		debtRatioCurve, debtRatioConvex, crvAPRByConvex, cvxAPRByConvex = determineCRVCVXData(
			args.allStrategiesForVault,
			args.baseAssetPrice,
			args.poolPrice,
			args.baseAPR,
			args.gaugeAddress,
		)
	}

	/**********************************************************************************************
	** At this point, we are supposed to have all the data we need to calculate:
	**********************************************************************************************/
	crvAPR := bigNumber.NewFloat(0).Add(bigNumber.NewFloat(0).Mul(args.baseAPR, yBoost), args.rewardAPR)

	/**********************************************************************************************
	** Calculate the CVX APR
	**********************************************************************************************/
	// convexCrvRewardsGrossAPR := bigNumber.NewFloat(0).Sub(ONE, cvxApyData.cvxFee)
	// convexCrvRewardsGrossAPR = bigNumber.NewFloat(0).Mul(convexCrvRewardsGrossAPR, cvxApyData.cvxBoost)
	// convexCrvRewardsGrossAPR = bigNumber.NewFloat(0).Mul(convexCrvRewardsGrossAPR, args.baseAPR)
	// convexCrvRewardsNetAPR := bigNumber.NewFloat(0).Sub(ONE, cvxApyData.cvxKeepCRV)
	// convexCrvRewardsNetAPR = bigNumber.NewFloat(0).Mul(convexCrvRewardsNetAPR, convexCrvRewardsGrossAPR)
	// cvxGrossAPR := bigNumber.NewFloat(0).Add(convexCrvRewardsGrossAPR, cvxApyData.cvxPrintedAsCRV)
	// cvxNetAPR := bigNumber.NewFloat(0).Add(args.poolAPY, convexCrvRewardsNetAPR)
	// cvxNetAPR = bigNumber.NewFloat(0).Add(cvxNetAPR, cvxApyData.cvxPrintedAsCRV)
	// cvxNetAPR = bigNumber.NewFloat(0).Mul(cvxNetAPR, oneMinusPerfFee)

	/**********************************************************************************************
	** Calculate the CRV Gross APR:
	** 1. Taking the base APR, scaling it with the boost and removing the percentage of CRV we want
	** to keep
	** 2. Adding the rewards APR
	** 3. Adding the pool APY
	**********************************************************************************************/
	keepCRVRatio := bigNumber.NewFloat(0).Sub(ONE, crvKeepCrv)               // 1 - keepCRV
	grossAPRCurve := bigNumber.NewFloat(0).Mul(args.baseAPR, yBoost)         // 1 - baseAPR * yBoost
	grossAPRCurve = bigNumber.NewFloat(0).Mul(grossAPRCurve, keepCRVRatio)   // 1 - baseAPR * yBoost * keepCRV
	grossAPRCurve = bigNumber.NewFloat(0).Add(grossAPRCurve, args.rewardAPR) // 2 - (baseAPR * yBoost * keepCRV) + rewardAPR
	grossAPRCurve = bigNumber.NewFloat(0).Add(grossAPRCurve, args.poolAPY)   // 3 - (baseAPR * yBoost * keepCRV) + rewardAPR + poolAPY
	grossAPR := bigNumber.NewFloat(0).Add(
		bigNumber.NewFloat(0).Mul(grossAPRCurve, debtRatioCurve),   // grossAPRCurve * debtRatioCurve
		bigNumber.NewFloat(0).Mul(cvxAPRByConvex, debtRatioConvex), // cvxAPRByConvex * debtRatioConvex
	)

	/**********************************************************************************************
	** Calculate the CRV Net APR:
	** Take the gross APR and remove the performance fee and the management fee
	**********************************************************************************************/
	netAPRCurve := bigNumber.NewFloat(0).Mul(grossAPRCurve, oneMinusPerfFee)   // grossAPRCurve * (1 - perfFee)
	netAPRConvex := bigNumber.NewFloat(0).Mul(crvAPRByConvex, oneMinusPerfFee) // crvAPRByConvex * (1 - perfFee)
	netAPR := bigNumber.NewFloat(0).Add(
		bigNumber.NewFloat(0).Mul(netAPRCurve, debtRatioCurve),   // netAPRCurve * debtRatioCurve
		bigNumber.NewFloat(0).Mul(netAPRConvex, debtRatioConvex), // netAPRConvex * debtRatioConvex
	)

	/**********************************************************************************************
	** Calculate the final boost
	**********************************************************************************************/
	boost := bigNumber.NewFloat(0).Add(
		bigNumber.NewFloat(0).Mul(yBoost, debtRatioCurve),       // yBoost * debtRatioCurve
		bigNumber.NewFloat(0).Mul(convexBoost, debtRatioConvex), // convexBoost * debtRatioConvex
	)

	// PPS
	ppsPerTime, _ := store.ListPricePerShare(chainID, args.vault.Address)
	ppsInception := bigNumber.NewFloat(1)
	ppsWeekAgo := helpers.GetLastWeek(ppsPerTime, args.vault.Decimals)
	ppsMonthAgo := helpers.GetLastMonth(ppsPerTime, args.vault.Decimals)

	apyStruct := TAPIV1APY{
		Type:              "crv",
		GrossAPR:          grossAPR,
		NetAPY:            netAPR,
		StakingRewardsAPR: ZERO,
		Fees: TAPIV1Fees{
			Performance: vaultPerformanceFee,
			Management:  vaultManagementFee,
			Withdrawal:  ZERO,
			KeepCRV:     crvKeepCrv,
			CvxKeepCRV:  ZERO,
		},
		Points: TAPIV1Points{
			WeekAgo:   ppsWeekAgo,
			MonthAgo:  ppsMonthAgo,
			Inception: ppsInception,
		},
		Composite: TAPIV1Composite{
			Boost:      boost,
			PoolAPY:    args.poolAPY,
			BoostedAPR: crvAPR,
			BaseAPR:    args.baseAPR,
			CvxAPR:     cvxAPRByConvex,
			RewardsAPR: args.rewardAPR,
		},
	}
	return apyStruct
}

/**************************************************************************************************
** If the vault has two strategies then the first is curve and the second is convex
** The first strategy should be curve, the second should be convex.
** However the order on the vault object here does not correspond to the order on the withdrawal
** queue on chain, therefore we need to re-order so convex is always second if necessary
**************************************************************************************************/
func determineCRVCVXData(
	strategies []*models.TStrategy,
	baseAssetPrice *bigNumber.Float,
	poolPrice *bigNumber.Float,
	baseAPR *bigNumber.Float,
	gaugeAddress common.Address,
) (*bigNumber.Float, *bigNumber.Float, *bigNumber.Float, *bigNumber.Float) {
	if len(strategies) != 2 {
		debtRatio := bigNumber.NewFloat(0)
		if len(strategies) >= 1 {
			if isConvexStrategy(strategies[0]) {
				debtRatio = helpers.ToNormalizedAmount(strategies[0].DebtRatio, 4)
				return bigNumber.NewFloat(0), debtRatio, bigNumber.NewFloat(0), bigNumber.NewFloat(0)
			}
			debtRatio = helpers.ToNormalizedAmount(strategies[0].DebtRatio, 4)
			return debtRatio, bigNumber.NewFloat(0), bigNumber.NewFloat(0), bigNumber.NewFloat(0)
		}
		return bigNumber.NewFloat(0), bigNumber.NewFloat(0), bigNumber.NewFloat(0), bigNumber.NewFloat(0)
	}
	crvStrategy := strategies[0]
	cvxStrategy := strategies[1]
	if !isConvexStrategy(strategies[1]) {
		cvxStrategy = strategies[0]
		crvStrategy = strategies[1]
	}
	debtRatioInCurve := helpers.ToNormalizedAmount(crvStrategy.DebtRatio, 4)
	debtRatioInConvex := helpers.ToNormalizedAmount(cvxStrategy.DebtRatio, 4)
	crvAPR, cvxAPR := getCVXPoolAPR(cvxStrategy.ChainID, cvxStrategy.Address, baseAssetPrice)
	return debtRatioInCurve, debtRatioInConvex, crvAPR, cvxAPR
}
